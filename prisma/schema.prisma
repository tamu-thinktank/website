// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma" // for PlanetScale
}

// ------------------ nextauth tables ------------------

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

// officers
model User {
    id            String        @id @default(cuid())
    name          String
    email         String        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    availability  OfficerTime[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ------------------

enum Year {
    FRESHMAN
    SOPHOMORE
    JUNIOR
    SENIOR
    GRADUATE
}

enum Challenge {
    TDC_93
    TDC_94
    TDC_95
    TDC_96
    TDC_97
    TDC_98
}

model ChallengeTable {
    challenge  Challenge     @id
    applicants Application[] // the applicants that selected this challenge
}

enum ApplicationStatus {
    PENDING
    ACCEPTED
    REJECTED
}

// Availabilities of officers for each time section in availability grid
model OfficerTime {
    gridTime   String // Temporal.ZonedDateTime ISO in UTC
    officerId  String
    officer    User   @relation(fields: [officerId], references: [id], onDelete: Cascade)
    selectedAt String // Temporal.ZonedDateTime ISO in UTC

    @@id([gridTime, officerId])
    @@index([officerId])
}

// Availabilities of applicants
model ApplicantTime {
    gridTime    String // Temporal.ZonedDateTime ISO in UTC
    applicant   Application @relation(fields: [applicantId], references: [id], onDelete: Cascade)
    applicantId String

    @@id([gridTime, applicantId])
    @@index([applicantId])
}

model Application {
    id          String            @id @default(cuid())
    submittedAt DateTime          @default(now())
    status      ApplicationStatus @default(PENDING)
    location    String? // interview location if accepted

    // personal info section
    fullName     String
    email        String  @unique
    uin          Int     @unique
    altEmail     String?
    phone        String
    year         Year
    major        String
    availability Boolean

    // Interests and Motivation section
    interestedAnswer    String           @db.Text
    challenges          ChallengeTable[]
    interestedChallenge Challenge
    passionAnswer       String           @db.Text
    isLeadership        Boolean

    // Leadership section, empty if `isLeadership` is false
    skillsAnswer       String?  @db.Text
    conflictsAnswer    String?  @db.Text
    presentation       Int? // 1-5
    timeManagement     String?  @db.Text
    relevantExperience String?  @db.Text
    timeCommitment     Boolean?

    meetingTimes ApplicantTime[] // the time sections that the applicant selected
    resumeId     String // the id of the resume file in the google drive
}
