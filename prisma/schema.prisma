// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma" // for PlanetScale
}

// ------------------ nextauth tables ------------------

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

// officers
model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    meetingTimes  MeetingTime[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ------------------

enum Year {
    FRESHMAN
    SOPHOMORE
    JUNIOR
    SENIOR
    GRADUATE
}

enum Availability {
    PART_TIME // 6 - 12 hours
    FULL_TIME // >12 hours
}

enum Challenge {
    AIAA
    RASC_AL
    Blue_Skies
}

enum ApplicationStatus {
    PENDING
    ACCEPTED
    REJECTED
}

// table for relation
model ChallengeTable {
    challenge    Challenge     @id
    applications Application[] // the applications that selected this challenge
}

model MeetingTime {
    id           Int           @id @default(autoincrement())
    start        DateTime
    end          DateTime
    officer      User          @relation(fields: [officerId], references: [id])
    officerId    String
    applications Application[] // the applications that selected this time range

    @@index([officerId])
}

model Application {
    id          String            @id @default(cuid())
    submittedAt DateTime          @default(now())
    status      ApplicationStatus @default(PENDING)

    // personal info section
    fullName     String
    email        String       @unique
    uin          Int          @unique
    altEmail     String?
    phone        String
    year         Year
    major        String
    availability Availability

    // Interests and Motivation section
    interestedAnswer    String           @db.Text
    challenges          ChallengeTable[]
    interestedChallenge Challenge
    passionAnswer       String           @db.Text
    isLeadership        Boolean

    // Leadership section, empty if `isLeadership` is false
    skillsAnswer    String? @db.Text
    conflictsAnswer String? @db.Text
    presentation    Int? // 1-5
    timeManagement  String? @db.Text

    // last section
    meetingTimes MeetingTime[]
    resumeLink   String        @db.Text
}
